version: '3.9'

services:
  traefik:
    image: traefik:v2.10.5
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    command:
      # Entrypoints configuration.
      # Define 3 entrypoints called http80, http443 and http8082 that will listen on port 80, 443 and 8082 of the Traefik container
      - --entrypoints.http80.address=:80
      ###- --entrypoints.http443.address=:443
      # port 8082 is only opened internally - see above open docker ports!
      - --entrypoints.http8082.address=:8082
      # Docker provider configuration -> enables the docker provider
      - --providers.docker=true
      # Makes sure that services have to explicitly direct Traefik to expose them
      # Only services that have the Docker label traefik.enable=true will be discovered
      # and added to the routing configuration
      - --providers.docker.exposedbydefault=false
      # Optional use the secure docker socket proxy -> tecnativa/docker-socket-proxy:latest
      # - --providers.docker.endpoint=tcp://socket_proxy:2375
      # Default docker network to use for connections to all containers
      # - --providers.docker.network=traefik_default
      # Logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
      - --log.level=debug
      - --accesslog=false
      - --accesslog.fields.names.StartUTC=drop
      # Configuring Multiple Filters
      #- --accesslog.filepath=/path/to/access.log
      #- --accesslog.format=json
      #- --accesslog.filters.statuscodes=200,300-302
      #- --accesslog.filters.retryattempts
      #- --accesslog.filters.minduration=10ms
      # enable api and dashboard in the recommended secure way instead of opening 8080
      - --api.dashboard=true
      - --api=true
      # Prometheus metrics
      # https://doc.traefik.io/traefik/observability/metrics/prometheus/
      # enable prometheus metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.entryPoint=http8082
      # create a manual router instead of the default one
      - --metrics.prometheus.manualrouting=true
      # enable metrics on entry points.
      - --metrics.prometheus.addEntryPointsLabels=true
      # enable metrics on services.
      - --metrics.prometheus.addServicesLabels=true
      # enable metrics on routers.
      - --metrics.prometheus.addrouterslabels=true
      # define extra labels for the requests_total metrics
      - --metrics.prometheus.headerlabels.forwardedHost=X-Forwarded-Host
      - --metrics.prometheus.headerlabels.forwardedFor=X-Forwarded-For
      - --metrics.prometheus.headerlabels.realIp=X-Real-Ip
      - --metrics.prometheus.headerlabels.userAgent=User-Agent
      # Global HTTP to HTTPS redirect. The easiest and probably most used variant is to redirect to HTTPS globally.
      # Once configured all your running services will use it
      # to enable http->https redirect and using letsencrypt https-ssl certificates do the following:
      #    - uncomment all triple commented lines '###' in this file currently 2 locations and setup your DNS provider
      - --entrypoints.http80.http.redirections.entrypoint.to=http443
      - --entryPoints.http80.http.redirections.entrypoint.scheme=https
      ###- --entrypoints.http443.http.tls.certresolver=leresolver
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      # letsencrypt staging environment
      #- --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.leresolver.acme.email=support@gd-inside.de
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
    labels:
      - traefik.enable=true
      # configure router to access dashboard and api
      - traefik.http.routers.traefik-api-dashboard.rule=Host(`${TRAEFIK_HOST:-localhost}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik-api-dashboard.service=api@internal
      - traefik.http.routers.traefik-api-dashboard.middlewares=traefik-auth
      # traefik metrics router configuration
      # we create 2 routes traefik-metrics-external is basicauth protected and
      # traefik-metrics-internal does not require basicauth
      - traefik.http.routers.traefik-metrics-external.rule=Host(`${TRAEFIK_HOST:-localhost}`) && PathPrefix(`/{path:metrics}`)
      - traefik.http.routers.traefik-metrics-external.service=prometheus@internal
      - traefik.http.routers.traefik-metrics-external.middlewares=traefik-auth
#      - traefik.http.routers.traefik-metrics-internal.rule=Host(`traefik`) && PathPrefix(`/{path:traefik-metrics[6-9]}`)
      - traefik.http.routers.traefik-metrics-internal.rule=Host(`traefik`) && PathPrefix(`/metrics`)
      - traefik.http.routers.traefik-metrics-internal.entrypoints=http8082
      - traefik.http.routers.traefik-metrics-internal.service=prometheus@internal
      # global auth middleware with user / password -> admin/admin
      - traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH:-admin:$$apr1$$gaS8tVEe$$MjqM8IlBvz2PRFEWcwha1/}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${TRAEFIK_LE_ACME_STORAGE:-./config/dev/traefik}:/letsencrypt
    environment:
      - TZ=Europe/Berlin
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  certdumper:
    # image from 01.11.2023
    image: ghcr.io/kereis/traefik-certs-dumper:sha-ebd9267-alpine
    volumes:
#      - ./traefik/acme:/traefik:ro
      - ${TRAEFIK_LE_ACME_STORAGE:-./config/dev/traefik}:/traefik:ro
      - ${TRAEFIK_LE_CERT_STORAGE:-./temp/dev/traefik/ssl}:/output:rw
    environment:
    # ACME_FILE=/traefik/acme.json is the default
    #  - ACME_FILE=/traefik/acme.json
      - CONVERT_KEYS_TO_RSA=yes
      - COMBINED_PEM=combined.pem
    # Don't set DOMAIN, if we want to dump all certificates
    #  - DOMAIN=digital7-exchange.com,digital7.exchange

  prometheus:
    image: prom/prometheus:v2.47.2
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.size=256MB
    volumes:
      - ${PROMETHEUS_CONFIG:-./config/dev/prometheus}:/etc/prometheus
      - ${PROMETHEUS_DATA:-./temp/dev/prometheus.data}:/prometheus
    expose:
      - 9090
    labels:
      - traefik.enable=true
      # If the container exposes a single port, then Traefik uses this port for private communication, so
      # it auto-detects port 9090 in next line.
      # https://doc.traefik.io/traefik/providers/docker/#port-detection
      - traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_HOST:-prometheus.localhost}`)
      # If a container exposes multiple ports or does not expose any port, then you must manually specify which
      # port Traefik should use for communication by using the label
      # traefik.http.services.<service_name>.loadbalancer.server.port like
      # - traefik.http.services.prometheus.loadbalancer.server.port=XXXX
      # connect our global traefik-auth basicauth middleware to this service to protect it
      - traefik.http.routers.prometheus.middlewares=traefik-auth
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  pushgateway:
    image: prom/pushgateway:v1.6.2
    # container_name: pushgateway
    restart: unless-stopped
    command:
      - --web.external-url=${PUSH_GATEWAY_WEBCONTEXT:-/pushgateway}
    depends_on:
      - prometheus
    expose:
      - 9091
    labels:
      - traefik.enable=true
      # container exposes a single port, so traefik auto-detects port 9091 in next line
      - traefik.http.routers.pushgateway.rule=Host(`${PUSH_GATEWAY_HOST:-localhost}`) && PathPrefix(`${PUSH_GATEWAY_WEBCONTEXT:-/pushgateway}`)
      # connect our global traefik-auth basicauth middleware to this service to protect it
      - traefik.http.routers.pushgateway.middlewares=traefik-auth
#      - traefik.http.middlewares.pushgateway-stripprefix.stripprefix.prefixes=/pushgateway
#      - traefik.http.routers.pushgateway.middlewares=pushgateway-stripprefix
  grafana:
    image: grafana/grafana-oss:10.1.5-ubuntu
    restart: unless-stopped
    expose:
      - 3000
    depends_on:
      - prometheus
    volumes:
      - ${GRAFANA_CONFIG_ETC:-./config/dev/grafana}:/etc/grafana
      - ${GRAFANA_DATA:-./temp/dev/grafana.data}:/var/lib/grafana
    labels:
      - traefik.enable=true
      # container exposes a single port, so traefik auto-detects port 3000 in next line
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_HOST:-grafana.localhost}`)
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  whoami:
    image: traefik/whoami:latest
    labels:
      - traefik.enable=true
      # container exposes a single port, so traefik auto-detects port 80 in next line
      - traefik.http.routers.whoami.rule=Host(`whoami.${TRAEFIK_HOST:-localhost}`)

  nginx:
    image: nginx:latest
    restart: unless-stopped
    depends_on:
      - traefik
    expose:
      - 80
    volumes:
      - ${NGINX_HTMLDIR:-./config/dev/nginx}:/usr/share/nginx/html:ro
    labels:
      - traefik.enable=true
      # container exposes a single port, so traefik auto-detects port 80 in next line
      - traefik.http.routers.nginx.rule=Host(`${TRAEFIK_HOST:-localhost}`)
    logging:
      options:
        max-size: "10m"
        max-file: "3"

#  # https://github.com/Tecnativa/docker-socket-proxy
#  socket_proxy:
#    image: tecnativa/docker-socket-proxy:latest
#    restart: unless-stopped
#    environment:
#      NETWORKS: 1
#      SERVICES: 1
#      CONTAINERS: 1
#      TASKS: 1
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    networks:
#      - traefik_public
#      - socket_proxy
