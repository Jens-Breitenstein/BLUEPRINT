version: '3.9'

services:
  traefik:
    image: traefik:v2.10.5
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    command:
      # Entrypoints configuration.
      # Define 2 entrypoints called http80 and http443, that will listen on port 80 and 443 of the Traefik container
      - --entrypoints.http80.address=:80
      - --entrypoints.http443.address=:443
      - --entrypoints.metrics.address=:8082
      # Docker provider configuration -> enables the docker provider
      - --providers.docker=true
      # Makes sure that services have to explicitly direct Traefik to expose them
      # Only services that have the Docker label traefik.enable=true will be discovered
      # and added to the routing configuration
      - --providers.docker.exposedbydefault=false
      # Optional use the secure docker socket proxy -> tecnativa/docker-socket-proxy:latest
      # - --providers.docker.endpoint=tcp://socket_proxy:2375
      # Default docker network to use for connections to all containers
      # - --providers.docker.network=traefik_default
      # Logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
      - --log.level=debug
      # enable api and dashboard in the recommended secure way instead of opening 8080
      - --api.dashboard=true
      - --api=true
      # Global HTTP to HTTPS redirect. The easiest and probably most used variant is to redirect to HTTPS globally.
      # Once configured all your running services will use it
      # to enable https->https redirect do the following:
      #    - replace all entrypoints with http80 -> http443
      #    - uncomment all triple commented lines '###'
      ###- --entrypoints.http80.http.redirections.entrypoint.to=http443
      ###- --entrypoints.http80.http.redirections.entrypoint.scheme=https
      # Send metrics to Prometheus
      - --metrics.prometheus=true
      - --metrics.prometheus.entryPoint=metrics
      # - --metrics.prometheus.manualrouting=true
    labels:
      - traefik.enable=true
      # configure router to access dashboard and api
      - traefik.http.routers.traefik-api-dashboard.rule=Host(`${TRAEFIK_URL:-traefik.localhost}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik-api-dashboard.service=api@internal
      - traefik.http.routers.traefik-api-dashboard.entrypoints=http80
      - traefik.http.routers.traefik-api-dashboard.middlewares=traefik-auth
      # global auth middleware with user / password -> admin/admin
      - traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH:-admin:$$apr1$$gaS8tVEe$$MjqM8IlBvz2PRFEWcwha1/}
      # https access
      ###- traefik.http.routers.traefik-api-dashboard.tls=true
      # metrics
      - traefik.http.routers.metrics.rule=Host(`${TRAEFIK_URL:-traefik.localhost}`) && PathPrefix(`/metrics`)
      - traefik.http.routers.metrics.tls=true
      - traefik.http.routers.metrics.tls.certResolver=sec
      - traefik.http.routers.metrics.service=metrics
      - traefik.http.routers.metrics.middlewares=myauth
      - traefik.http.services.metrics.loadbalancer.server.port=8082
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=256MB'
    volumes:
      - ${PROMETHEUS_CONFIG:-./config/dev/prometheus}:/etc/prometheus
      - ${PROMETHEUS_DATA:-./temp/dev/prometheus.data}:/prometheus
    expose:
      - 9090
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_URL:-prometheus.localhost}`)
      - traefik.http.routers.prometheus.entrypoints=http80
      # the next 2 lines could be deleted, as traefik can do its magic ....
      # in this case I prefer explicit configuration
      - traefik.http.routers.prometheus.service=prometheus-service
      - traefik.http.services.prometheus-service.loadbalancer.server.port=9090
      # connect our global traefik-auth basicauth middleware to this service to protect it
      - traefik.http.routers.prometheus.middlewares=traefik-auth
      # https access
      ###- traefik.http.routers.prometheus.tls=true
      # custom path for prometheus metrics
      # - "traefik.http.middlewares.admin-auth-metrics.basicauth.users=USERNAME:PASSWORD"
      - "traefik.http.routers.traefik-public-metrics-http.rule=Host(`${PROMETHEUS_URL:-prometheus.localhost}`) && PathPrefix(`/traefik-metrics`)"
      - "traefik.http.routers.traefik-public-metrics-http.entrypoints=http"
      # - "traefik.http.routers.traefik-public-metrics-http.middlewares=https-redirect"
      # - "traefik.http.routers.traefik-public-metrics-https.middlewares=secHeaders@file"
      # - "traefik.http.routers.traefik-public-metrics-https.rule=Host(`${PROMETHEUS_URL:-prometheus.localhost}`) && PathPrefix(`/traefik-metrics`)"
      # - "traefik.http.routers.traefik-public-metrics-https.entrypoints=https"
      # - "traefik.http.routers.traefik-public-metrics-https.tls=true"
      # - "traefik.http.routers.traefik-public-metrics-https.service=prometheus@internal"
      # - "traefik.http.routers.traefik-public-metrics-https.tls.certresolver=le-tls"
      # - "traefik.http.routers.traefik-public-metrics-https.middlewares=secHeaders@file,admin-auth-metrics,def-compress"      -
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: pushgateway
    restart: unless-stopped
    depends_on:
      - prometheus
    expose:
      - 9091
    labels:
      - traefik.enable=true
      - traefik.http.routers.pushgateway.rule=Host(`${PUSH_GATEWAY_URL:-pushgateway.localhost}`)
      - traefik.http.routers.pushgateway.entrypoints=http80
      # the next 2 lines could be deleted, as traefik can do its magic ....
      # in this case I prefer explicit configuration
      - traefik.http.routers.pushgateway.service=pushgateway-service
      - traefik.http.services.pushgateway-service.loadbalancer.server.port=9091
      # connect our global traefik-auth basicauth middleware to this service to protect it
      #- traefik.http.routers.pushgateway.middlewares=traefik-auth
      # https access
      ###- traefik.http.routers.pushgateway.tls=true

  grafana:
    image: grafana/grafana-oss:10.1.5-ubuntu
    restart: unless-stopped
    expose:
      - 3000
    depends_on:
      - prometheus
    volumes:
      - ${GRAFANA_CONFIG:-./config/dev/grafana/provisioning}:/etc/grafana/provisioning
      - ${GRAFANA_DATA:-./temp/dev/grafana.data}:/var/lib/grafana
    environment:
      # - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: "false"
      - "GF_PATHS_CONFIG: /etc/grafana/provisioning/grafana.ini"
      # - GF_INSTALL_PLUGINS: grafana-piechart-panel
      # - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      # - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      # - GF_USERS_ALLOW_SIGN_UP=false
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_URL:-grafana.localhost}`)
      - traefik.http.routers.grafana.entrypoints=http80
      - traefik.http.routers.grafana.service=grafana-service
      - traefik.http.services.grafana-service.loadbalancer.server.port=3000
      # https access
      ###- traefik.http.routers.grafana.tls=true
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  whoami:
    image: traefik/whoami:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.entrypoints=http80
      #- traefik.http.routers.whoami.entrypoints=http80,http443
      - traefik.http.routers.whoami.rule=Host(`whoami.localhost`)
      # connect our global traefik-auth auth middleware to this service to protect it
      #- traefik.http.routers.whoami.middlewares=traefik-auth
      # https access
      ###- traefik.http.routers.whoami.tls=true

  nginx:
    image: nginx
    restart: unless-stopped
    depends_on:
      - traefik
    expose:
      - 80
    volumes:
      - ${NGINX_HTMLDIR:-./config/dev/nginx}:/usr/share/nginx/html:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx.entrypoints=http80
      - traefik.http.routers.nginx.rule=Host(`localhost`)
      # https access
      ###- traefik.http.routers.nginx.tls=true
    logging:
      options:
        max-size: "10m"
        max-file: "3"
